<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.emucoo.mapper.TLoopWorkMapper">
    <resultMap id="BaseResultMap" type="com.emucoo.model.TLoopWork">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="work_id" property="workId" jdbcType="VARCHAR"/>
        <result column="sub_work_id" property="subWorkId" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="create_user_id" property="createUserId" jdbcType="BIGINT"/>
        <result column="create_user_name" property="createUserName" jdbcType="VARCHAR"/>
        <result column="excute_user_id" property="excuteUserId" jdbcType="BIGINT"/>
        <result column="excute_user_name" property="excuteUserName" jdbcType="VARCHAR"/>
        <result column="head_img_url" property="executeUserHeadImgUrl" jdbcType="VARCHAR"/>
        <result column="audit_user_id" property="auditUserId" jdbcType="BIGINT"/>
        <result column="audit_user_name" property="auditUserName" jdbcType="VARCHAR"/>
        <result column="send_user_ids" property="sendUserIds" jdbcType="BIGINT"/>
        <result column="work_status" property="workStatus" jdbcType="INTEGER"/>
        <result column="work_result" property="workResult" jdbcType="INTEGER"/>
        <result column="execute_begin_date" property="executeBeginDate" jdbcType="TIMESTAMP"/>
        <result column="execute_end_date" property="executeEndDate" jdbcType="TIMESTAMP"/>
        <result column="execute_remind_time" property="executeRemindTime" jdbcType="TIMESTAMP"/>
        <result column="execute_remind_type" property="executeRemindType" jdbcType="INTEGER"/>
        <result column="execute_deadline" property="executeDeadline" jdbcType="TIMESTAMP"/>
        <result column="audit_deadline" property="auditDeadline" jdbcType="TIMESTAMP"/>
        <result column="audit_time" property="auditTime" jdbcType="DATE"/>
        <result column="task_id" property="taskId" jdbcType="BIGINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
        <result column="version" property="version" jdbcType="INTEGER"/>
        <result column="score" property="score" jdbcType="VARCHAR"/>
        <result column="is_sign" property="isSign" jdbcType="BIT"/>
        <association property="task" javaType="com.emucoo.model.TTask">
            <id column="task_id" property="id" jdbcType="BIGINT"/>
            <result column="name" property="name" jdbcType="VARCHAR"/>
            <result column="type" property="type" jdbcType="INTEGER"/>
            <result column="work_id" property="workId" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <select id="countPendingExecuteWorkNum" resultType="java.lang.Integer">
        select count(1) from t_loop_work a inner join (select id from t_task where (type =1 and is_use=1) or type != 1)
        b on a.task_id = b.id
        where a.excute_user_id=#{submitUserId}
        and a.type is not null
        and #{today} between a.execute_begin_date and a.execute_end_date
    </select>

    <select id="countPendingReviewWorkNum" resultType="java.lang.Integer">
        select count(1) from t_loop_work a inner join t_task b on a.task_id = b.id
        where a.audit_user_id=#{auditUserId}
        and a.work_status=2
        and a.type is not null
        and #{today} between a.execute_begin_date and a.audit_deadline
    </select>

    <select id="listPendingExecute" resultType="com.emucoo.model.TLoopWork">
        SELECT t1.*, t2.head_img_url as avatar, t2.real_name as userName, t3.description, t3.`name` AS taskTitle,
        t3.is_use as available
        FROM t_loop_work t1
        inner join (select * from t_task where (type = 1 and is_use = 1) or type != 1) t3 on t1.task_id = t3.id
        LEFT JOIN sys_user t2 ON t1.excute_user_id = t2.id
        WHERE t1.excute_user_id = #{executeUserId}
        AND t1.type is not null
        and #{date} between t1.execute_begin_date and t1.execute_end_date
    </select>

    <select id="listPendingReview" resultType="com.emucoo.model.TLoopWork">
        SELECT t1.*, t2.head_img_url as avatar, t2.real_name as userName, t3.`name` AS taskTitle
        FROM t_loop_work t1
        LEFT JOIN sys_user t2 ON t1.excute_user_id = t2.id
        inner JOIN t_task t3 ON t1.task_id = t3.id
        WHERE t1.audit_user_id = #{auditUserId}
        AND t1.work_status = 2
        AND t1.type is NOT NULL
        AND #{today} between t1.execute_begin_date and t1.audit_deadline
    </select>

    <select id="calendarMonthList" resultType="com.emucoo.model.TLoopWork">
        SELECT t1.*, t2.head_img_url, t2.real_name, t3.`name` AS taskTitle
        FROM t_loop_work t1
        LEFT JOIN sys_user t2 ON t1.excute_user_id = t2.id
        LEFT JOIN t_task t3 ON t1.task_id = t3.id
        WHERE (t1.audit_user_id = #{userId} or t1.excute_user_id=#{userId})
        AND ((year(t1.execute_begin_date)=#{yearStr} and month(t1.execute_begin_date) = #{monthStr})
        OR (year(t1.execute_end_date)=#{yearStr} and month(t1.execute_end_date) = #{monthStr}) )
        GROUP BY t1.id
        ORDER BY t1.execute_end_date asc
    </select>

    <select id="getTaskList" resultType="com.emucoo.model.TLoopWork">
        SELECT t1.*,t3.`name` AS taskTitle
        FROM t_loop_work t1
        LEFT JOIN t_task t3 ON t1.task_id = t3.id
        WHERE t1.type != 4
        <if test="auditUserId != null">
            AND  t1.audit_user_id=#{auditUserId}
        </if>
        <if test="excuteUserId != null">
            AND  t1.excute_user_id=#{excuteUserId}
        </if>
        <if test="createUserId != null">
            AND  t1.create_user_id=#{createUserId}
        </if>
        AND ((year(t1.execute_begin_date)=#{yearStr} and month(t1.execute_begin_date) = #{monthStr})
        OR (year(t1.execute_end_date)=#{yearStr} and month(t1.execute_end_date) = #{monthStr}) )
        <if test="auditUserId != null">
            ORDER BY t1.audit_time DESC
        </if>
        <if test="excuteUserId != null">
            ORDER BY t1.execute_deadline DESC
        </if>
        <if test="createUserId != null">
            ORDER BY t1.create_time DESC
        </if>
    </select>

    <select id="calendarDateList" resultMap="BaseResultMap">
        SELECT t1.*  FROM t_loop_work t1
        WHERE
        <if test="workType != null">
            t1.type=#{workType} AND
        </if>
        (t1.audit_user_id = #{userId} or t1.excute_user_id=#{userId})
        AND
        #{executeDate} between str_to_date(t1.execute_begin_date,'%Y-%m-%d') and t1.execute_end_date
        ORDER BY t1.execute_end_date asc
    </select>

    <select id="fetchByWorkIdAndType" resultMap="BaseResultMap">
        select * from t_loop_work where work_id = #{workId} and sub_work_id = #{subWorkId} and type=#{workType}
        order by modify_time desc
        limit 1
    </select>

    <select id="fetchOneTaskByWorkIds" resultMap="BaseResultMap">
        select * from t_loop_work where work_id=#{workId} and sub_work_id = #{subWorkId} limit 1
    </select>

    <select id="fetchTaskExeHistory" resultMap="BaseResultMap">
        select * from t_loop_work where type=#{workType} and work_id=#{workId} and work_status=2
    </select>

    <update id="updateWorkStatus" parameterType="com.emucoo.model.TLoopWork">
        UPDATE t_loop_work
        <set>
            <if test="workStatus != null">
                work_status = #{workStatus},
            </if>
            <if test="auditDeadline != null">
                audit_deadline = #{auditDeadline},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime}
            </if>
        </set>
        WHERE work_id = #{workId} and sub_work_id = #{subWorkId} and type=#{type}

    </update>

    <update id="auditLoopWork" parameterType="com.emucoo.model.TLoopWork">
        UPDATE t_loop_work
        <set>
            <if test="auditUserId != null and auditUserId != ''">
                audit_user_id = #{auditUserId},
            </if>
            <if test="auditUserName != null and auditUserName != ''">
                audit_user_name = #{auditUserName},
            </if>
            <if test="workResult != null">
                work_result = #{workResult}
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime}
            </if>
        </set>
        WHERE work_id = #{workId} and sub_work_id = #{subWorkId} and type=#{type}
    </update>


    <select id="getTaskImproveSubmit" resultType="com.emucoo.dto.modules.task.TaskImproveSubmit">
        select
        s.excute_user_id as taskSubPerID,
        s.modify_time as taskSubTimeDate,
        t.head_img_url as taskSubPerHeadUrl,
        k.img_ids imgUrls,
        k.work_txt as workText,
        k.num_option_value digitalItemValue
        from t_loop_work s
        left join sys_user t on t.id = s.create_user_id
        left join t_operate_data_for_work k on k.loop_work_id = s.id
        where s.id = #{loopWorkId}
    </select>

    <select id="getTaskImproveStatement" resultType="com.emucoo.dto.modules.task.TaskImproveStatement">
        select
        t.oppt_id chancePointID,
        e.name chancePointTitle,
        k.org_id chancePointSourceID,
        m.dpt_name chancePointSourceName,
        t.oppt_id chancePointNum,
        s.work_status taskStatus,
        t.name taskTitle,
        t.description taskExplain,
        t.illustration_img_ids imgUrls,
        t.task_start_date startDate,
        t.task_end_date endDate,
        s.execute_deadline submitDeadlineDate,
        s.audit_deadline reviewDeadlineDate,
        s.excute_user_id executorID,
        s.excute_user_name executorName,
        s.audit_user_id auditorID,
        s.audit_user_name auditorName,
        s.send_user_ids ccPersonNames,
        t.loop_cycle_type taskRepeatType,
        t.loop_cycle_value taskRepeatValue,
        o.preinstall_score taskRank,
        case when o.feedback_need_text=1 then 2 else 1 end feedbackText,
        o.feedback_img_type feedbackImg,
        o.feedback_num_type digitalItemType,
        o.feedback_num_name digitalItemName
        from t_loop_work s
        LEFT JOIN t_task t on t.id = s.task_id
        left join t_opportunity e on t.oppt_id = e.id
        Left join t_operate_option o on t.id = o.task_id
        LEFT JOIN t_front_plan k on k.id = t.front_plan_id
        LEFT JOIN sys_dept m on m.id = k.org_id
        where s.id=#{loopWorkId}
    </select>

    <select id="findImproveTaskList" resultMap="BaseResultMap">
        SELECT
        twork.id,
        twork.excute_user_id,
        twork.excute_user_name,
        twork.work_status,
        twork.work_result,
        task.id AS task_id,
        task.name,
        task.type,
        task.work_id,
        twork.sub_work_id,
        user.head_img_url
        FROM t_loop_work twork INNER JOIN t_task task ON task.work_id = twork.work_id AND task.oppt_id = #{opptId} AND
        task.report_id = #{reportId} AND task.is_del = FALSE AND task.is_use = TRUE
        INNER JOIN sys_user user ON twork.excute_user_id = user.id
        WHERE twork.type=3
        GROUP BY twork.work_id,twork.excute_user_id
        ORDER BY twork.create_time DESC
    </select>

    <select id="findImproveTaskListByUser" resultType="com.emucoo.model.TLoopWork">
        SELECT
        twork.id,
        twork.excute_user_id,
        twork.excute_user_name,
        twork.work_status,
        twork.work_result,
        twork.sub_work_id
        FROM t_loop_work twork
        INNER JOIN t_task task ON task.work_id = twork.work_id AND task.oppt_id = #{opptId} AND
        task.report_id = #{reportId} AND task.is_del = FALSE AND is_use = TRUE
        WHERE twork.type=3 AND twork.work_id = #{workId} AND twork.excute_user_id = #{excuteUserId}
    </select>


    <update id="markExpiredExecutionWorks">
        <![CDATA[
        update t_loop_work set work_status=3, work_result=2 where work_status=1 and execute_deadline < #{dt} and type in (1,2,3,5)
        ]]>
    </update>

    <update id="markExpiredAuditWorks">
        <![CDATA[
        update t_loop_work set work_status=5, work_result=1 where work_status=2 and audit_deadline < #{dt} and type in (1,2,3)
        ]]>
    </update>

    <update id="markExpiredExeOperateOptions">
        <![CDATA[
        update t_operate_data_for_work a inner join t_loop_work b on a.loop_work_id = b.id set a.audit_result = 2
        where b.work_status=1 and b.execute_deadline < #{dt}
        ]]>
    </update>

    <update id="markExpiredAuditOperateOptions">
        <![CDATA[
        update t_operate_data_for_work a inner join t_loop_work b on a.loop_work_id = b.id set a.audit_result = 1
        where b.work_status=2 and b.audit_deadline < #{dt}
        ]]>
    </update>

    <select id="fetchCommonTaskStatement" resultType="com.emucoo.dto.modules.task.TaskCommonStatement">
        select
        s.work_status taskStatus,
        t.name taskTitle,
        t.description taskExplain,
        DATE_FORMAT(s.execute_begin_date, '%Y%m%d') startDate,
        DATE_FORMAT(s.execute_end_date, '%Y%m%d') endDate,
        (UNIX_TIMESTAMP(s.execute_deadline) * 1000) as submitDeadline,
        (UNIX_TIMESTAMP(s.audit_deadline) * 1000) as reviewDeadline,
        s.excute_user_id executorID,
        s.excute_user_name executorName,
        s.audit_user_id auditorID,
        s.audit_user_name auditorName,
        (select group_concat(real_name) from sys_user where find_in_set(id, s.send_user_ids)) ccPersonNames,
        s.send_user_ids ccPersonIds,
        t.loop_cycle_type taskRepeatType,
        t.loop_cycle_value taskRepeatValue,
        t.preinstall_score taskRank,
        t.score_type reviewItemType,
        (select group_concat(img_url) from t_file where find_in_set(id, t.illustration_img_ids)) imgurls
        from t_loop_work s left join t_task t on s.task_id = t.id
        where s.id = #{loopWorkId}
    </select>

    <select id="fetchTaskCommonItem" resultType="com.emucoo.dto.modules.task.TaskCommonItemVo">
        select
        b.task_item_id as taskItemID,
        c.name as taskItemTitle,
        c.feedback_img_example_id as itemImgUrls,
        case when c.feedback_need_text = 0 then 1 else 2 end as feedbackText,
        case when c.feedback_img_type = 0 then 1
        when c.feedback_img_type = 1 and c.feedback_img_from_album = 1 then 2
        else 3 end as feedbackImg,
        c.feedback_num_name as digitalItemName,
        c.feedback_num_type as digitalItemType,
        b.id as taskSubID,
        d.head_img_url as taskSubHeadUrl,
        (UNIX_TIMESTAMP(a.modify_time) * 1000) as taskSubTime,
        b.work_txt as workText,
        b.num_option_value as digitalItemValue,
        b.img_ids as imageUrls,
        b.audit_result as reviewResult,
        b.id as reviewID,
        b.audit_content as reviewOpinion,
        (UNIX_TIMESTAMP(b.modify_time) * 1000) as reviewTime,
        b.audit_user_id as auditorID,
        e.real_name as auditorName,
        e.head_img_url as auditorHeadUrl,
        b.audit_img_ids as imgUrls

        from t_operate_data_for_work b left join t_loop_work a on a.id = b.loop_work_id
        left join t_operate_option c on c.id = b.task_item_id
        left join sys_user d on a.excute_user_id = d.id
        left join sys_user e on b.audit_user_id = e.id

        where b.loop_work_id=#{loopWorkId}
    </select>

    <select id="filterExecuteRemindWorks" resultType="com.emucoo.model.TLoopWork">
        select * from t_loop_work where work_status = 1
        and ( (execute_remind_time is null and execute_deadline between #{deadTimeLeft} and #{deadTimeRight})
        or (execute_remind_time between #{remindTimeLeft} and #{remindTimeRight}) )
    </select>

    <select id="filterAuditRemindWorks" resultType="com.emucoo.model.TLoopWork">
        select * from t_loop_work where work_status = 2 and work_result is null
        and audit_deadline between #{deadTimeLeft} and #{deadTimeRight}
    </select>

    <select id="isLoopWorkExist" resultType="java.lang.Integer">
        select count(1) from t_loop_work where task_id=#{taskId} and execute_begin_date = #{dt} and
        excute_user_id=#{executorId}
    </select>
</mapper>